url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank.zip'
getwd()
download.file(url, destfile = 'bank.zip')
download.file(url, destfile = 'workingWithData/bank.zip')
unzip('bank.zip', list = T)
unzip('workingWithData/bank.zip', list = T)
install.packages('tidyverse')
library('tidyverse')
library('devtools')
library()
search()
.GlobalEnv
.GlobalEnv()
help(package = 'devtools')
help(package = 'devTools')
# overview of functions contained in a package
help(package = 'devtools')
vignette(package = 'devtools')
vignette('dependencies')
x <- 1:10
x
x^2
π
T
t
1
1L
1 == 1L
1.0
1.0 == 1 == 1L
1.0 == 1
TRUE, FALSE, T, F
TRUE
FALSE
T
F
'David'
'loves'
'R'
'101'
'TRUE'
a <- 1
a <- 1L
# 2. logical - boolean values e.g.
a <- TRUE
a <- FALSE
a <- T
a <- F
# 3. character - character strings e.g.
a <- 'David'
a <- 'loves'
a <- 'R'
a <- '101'
a <- 'TRUE'
a
a <- -10 + 2
-10 + 2
4 * 4
4 / 2
2 ^ 4
sqrt(4)
abs(-10)floor(8.52)
cos(pi)
sqrt(4)
abs(-10)
floor(8.52)
cos(pi)
-10 > 2
4 <= 4
4 != 2
2 == 4
all.equal(0.5 - 0.4, 0.1)
(-10>2) & (4!=2)
(-10 > 2) | (4 != 2)
(-10 > 2) || (4 != 2)
(-10 > 2) ||| (4 != 2)
(-10 > 2) | (a4 != 2)
(-10 > 2) || (a4 != 2)
# OR Operator
(-10 < 2) || (a4 != 2)
(-10 < 2) || (a4 != 2)
(-10 < 2) | (a4 != 2)
(-10 < 2) | (4 != 2)
(-10 < 2) | (a4 != 2)
(-10 > 2) || (a4 != 2) # If true in the first condition, won't test the seocond one
(-10>2) && (a4!=2)
(-10>2) & (a4!=2)
(-10>2) && (forece erro !=2)
(-10>2) && (foreceErro !=2)
(-10>2) & (foreceErro !=2)
(-10>2) && (invalid !=2)
(-10>2) & (4!=2)
nchar('David')
substr('David', 2, 5)
toupper('David')
toUpper('David')
as.character(T)
as.character(pi)
as.character(4L)
pi
as.double(T)
as.double(FALSE)
as.double(4L)
as.integer("1")
as.integer("1a")
as.integer("1L")
as.integer("1")
NA
as.double('David')
7 + 12 + 3 + 15 + NA
c(7, 12, 3, 15, NA)
x <- c(7, 12, 3, 15, NA)
sum(x)
a <- 7, 12, 3, 15, NA
x <- c(7, 12, 3, 15, NA)
sum(x, na.rm = T)
sum(x, na.rm <- T)
x <- 4
is.integer(x)
x <- 4L
is.integer(x)
x <- 'David'
is.character(x)
x <- T
is.logical(x)
x <- 4
is.integer(x)
is.double(x)
is.na(x)
typeof(x)
x <- NA
is.na(x)
c(71, 56, 71, 71)
age <- c(71, 56, 71, 71)
age
typeof(age)
age <- c(71, 56, 71, 71, 'a')
age
typeof(age)
age <- c(71, 56, 71, 71)
age
typeof(age)
age <- c(71, 56, 71L, 71)
age
typeof(age)
age <- c(71L, 56L, 71L, 71L)
typeof(age)
age <- c(71L, 56L, 71L, 71)
typeof(age)
age <- c(71L, 56L, 71L, 71, T)
typeof(age)
age <- c(71L, 56L, 71L, 71L, T)
typeof(age)
name <- c('Donald', 'Barack', 'George', 'Bill')
democrat <- c(F, T, F, T)
# The type of the data in a vector can be changed explicitly using the “as.” functions:
as.character(age)
as.logical(age)
as.logical(0)
as.logical(-2)
sum(democrat)
age <- c(trump = 71, obama = 56, bush = 71, clinton = 71)
age
names(age)
age <- c(71, 56, 71, 71)
age
names(age) <- c('trump', 'obama', 'bush', 'clinton')
age
names(age) <- NULL
age
version
getwd()
setwd("/Users/bambrozi/workspace/github.com/bambrozio/academic-corner/dit/MScDataAnalytics/probabilityAndStatisticalInference/w1")
getwd()
salary<-readRDS("salary.rds")
names(salary)
salary$gender
str(salary$gender)
summary (salary$salary)
summary(salary)
library('plyr')
count(salary$gender)
tab<-table(salary$gender, salary$rank)
addmargins(tab)
addborders(tab)
addmargins(tab)
addborders(tab)
tab
prop.table(tab) # shows probabilities
getmode <- function(v)
{
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
getmode(salary$salary)
median(salary$salary)
mean(salary$salary)
meansal <- mean(salary$salary)
meansal
print(meansal, digits=1)
print(meansal, digits=2)
print(meansal, digits=3)
print(meansal, digits=10)
print(meansal, digits=6)
print(meansal, digits=7)
range(salary$salary)
quantile(salary$salary)
x=quantile(salary$salary); x[1]
x=quantile(salary$salary)
x[1]
x
x[0]
x[1]
x[2]
x=quantile(salary$salary); x[1]
IQR(salary$salary)
quantile(salary$salary)
var(salary$salary)
sd(salary$salary)
round(sd(salary$salary,2)) #rounded to 2 decimal places
getmode(salary$salary)
unique(salary$salary)
match(salary$salary, unique(salary$salary))
tabulate(match(salary$salary, unique(salary$salary)))
which.max(tabulate(match(salary$salary, unique(salary$salary))))
uniqv[which.max(tabulate(match(salary$salary, unique(salary$salary))))]
unique(salary$salary)
unique(salary$salary)[which.max(tabulate(match(salary$salary, unique(salary$salary))))]
getmode(salary$salary)
which.max(tabulate(match(salary$salary, unique(salary$salary))))
tabulate(match(salary$salary, unique(salary$salary)))
install.packages(psych)
install.packages("psych")
