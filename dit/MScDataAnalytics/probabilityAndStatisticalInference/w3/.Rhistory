url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank.zip'
getwd()
download.file(url, destfile = 'bank.zip')
download.file(url, destfile = 'workingWithData/bank.zip')
unzip('bank.zip', list = T)
unzip('workingWithData/bank.zip', list = T)
install.packages('tidyverse')
library('tidyverse')
library('devtools')
library()
search()
.GlobalEnv
.GlobalEnv()
help(package = 'devtools')
help(package = 'devTools')
# overview of functions contained in a package
help(package = 'devtools')
vignette(package = 'devtools')
vignette('dependencies')
x <- 1:10
x
x^2
π
T
t
1
1L
1 == 1L
1.0
1.0 == 1 == 1L
1.0 == 1
TRUE, FALSE, T, F
TRUE
FALSE
T
F
'David'
'loves'
'R'
'101'
'TRUE'
a <- 1
a <- 1L
# 2. logical - boolean values e.g.
a <- TRUE
a <- FALSE
a <- T
a <- F
# 3. character - character strings e.g.
a <- 'David'
a <- 'loves'
a <- 'R'
a <- '101'
a <- 'TRUE'
a
a <- -10 + 2
-10 + 2
4 * 4
4 / 2
2 ^ 4
sqrt(4)
abs(-10)floor(8.52)
cos(pi)
sqrt(4)
abs(-10)
floor(8.52)
cos(pi)
-10 > 2
4 <= 4
4 != 2
2 == 4
all.equal(0.5 - 0.4, 0.1)
(-10>2) & (4!=2)
(-10 > 2) | (4 != 2)
(-10 > 2) || (4 != 2)
(-10 > 2) ||| (4 != 2)
(-10 > 2) | (a4 != 2)
(-10 > 2) || (a4 != 2)
# OR Operator
(-10 < 2) || (a4 != 2)
(-10 < 2) || (a4 != 2)
(-10 < 2) | (a4 != 2)
(-10 < 2) | (4 != 2)
(-10 < 2) | (a4 != 2)
(-10 > 2) || (a4 != 2) # If true in the first condition, won't test the seocond one
(-10>2) && (a4!=2)
(-10>2) & (a4!=2)
(-10>2) && (forece erro !=2)
(-10>2) && (foreceErro !=2)
(-10>2) & (foreceErro !=2)
(-10>2) && (invalid !=2)
(-10>2) & (4!=2)
nchar('David')
substr('David', 2, 5)
toupper('David')
toUpper('David')
as.character(T)
as.character(pi)
as.character(4L)
pi
as.double(T)
as.double(FALSE)
as.double(4L)
as.integer("1")
as.integer("1a")
as.integer("1L")
as.integer("1")
NA
as.double('David')
7 + 12 + 3 + 15 + NA
c(7, 12, 3, 15, NA)
x <- c(7, 12, 3, 15, NA)
sum(x)
a <- 7, 12, 3, 15, NA
x <- c(7, 12, 3, 15, NA)
sum(x, na.rm = T)
sum(x, na.rm <- T)
x <- 4
is.integer(x)
x <- 4L
is.integer(x)
x <- 'David'
is.character(x)
x <- T
is.logical(x)
x <- 4
is.integer(x)
is.double(x)
is.na(x)
typeof(x)
x <- NA
is.na(x)
c(71, 56, 71, 71)
age <- c(71, 56, 71, 71)
age
typeof(age)
age <- c(71, 56, 71, 71, 'a')
age
typeof(age)
age <- c(71, 56, 71, 71)
age
typeof(age)
age <- c(71, 56, 71L, 71)
age
typeof(age)
age <- c(71L, 56L, 71L, 71L)
typeof(age)
age <- c(71L, 56L, 71L, 71)
typeof(age)
age <- c(71L, 56L, 71L, 71, T)
typeof(age)
age <- c(71L, 56L, 71L, 71L, T)
typeof(age)
name <- c('Donald', 'Barack', 'George', 'Bill')
democrat <- c(F, T, F, T)
# The type of the data in a vector can be changed explicitly using the “as.” functions:
as.character(age)
as.logical(age)
as.logical(0)
as.logical(-2)
sum(democrat)
age <- c(trump = 71, obama = 56, bush = 71, clinton = 71)
age
names(age)
age <- c(71, 56, 71, 71)
age
names(age) <- c('trump', 'obama', 'bush', 'clinton')
age
names(age) <- NULL
age
version
sum(2, 4, 6, 8, 10, 12, 14, 20, 30, 60)
IQR(2, 4, 6, 8, 10, 12, 14, 20, 30, 60)
?iqr
?IQR
X = 2, 4, 6, 8, 10, 12, 14, 20, 30, 60
X <- [2, 4, 6, 8, 10, 12, 14, 20, 30, 60]
X <- [2, 4, 6, 8, 10, 12, 14, 20, 30, 60]
C(2, 4, 6, 8, 10, 12, 14, 20, 30, 60)
?C
?c
c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60)
IQR(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))
?IQR
IQR(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60), na.rm= F, type = 7)
sum
sum(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))
sum(2, 4, 6, 8, 10, 12, 14, 20, 30, 60)
sum(2, 4, 6, 8, 10, 12, 14, 20, 30, 60)/4
60/4
10/4
quantile(2, 4, 6, 8, 10, 12, 14, 20, 30, 60)
quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))
quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[1]
quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[2]
quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[3]
quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[3] - quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[1]
quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[3] - quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[2]
quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[4] - quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[2]
quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[4] - quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[2] / 2
(quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[4] - quantile(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))[2]) / 2
range(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))
var(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))
sd(c(2, 4, 6, 8, 10, 12, 14, 20, 30, 60))
range(c(20, 30, 40, 50, 60, 70))
sd(c(3, 4, 5, 6, 8, 10))
power(sd(c(3, 4, 5, 6, 8, 10)))
power(sd(c(3, 4, 5, 6, 8, 10)), 2)
sd(c(3, 4, 5, 6, 8, 10))^2
sd(c(3, 4, 5, 6, 8, 10))
getwd()
library(ggplot2)
library(reshape)
library(plyr)
library (Hmisc)
ls
getwd
setwd(getwd()+ "/probabilityAndStatisticalInference/w2")
setwd(getwd() + "/probabilityAndStatisticalInference/w2")
setwd(getwd() + "/probabilityAndStatisticalInference/w2")
setwd(getwd()"/probabilityAndStatisticalInference/w2")
setwd(paste(getwd(), "/probabilityAndStatisticalInference/w2"))
getwd()
paste(getwd())
paste(getwd(), "abc")
getwd()
getwd()[1]
getwd()[0]
getwd()[1]
getwd()[2]
getwd()[1]
paste(getwd(), "abc")
paste(getwd(), "/abc")
gsub(" ", paste(getwd(), "/abc"))
gsub(" ", "", paste(getwd(), "/abc"))
gsub(" ", "", paste(getwd(), "/probabilityAndStatisticalInference/w2"))
setwd((gsub(" ", "", paste(getwd(), "/probabilityAndStatisticalInference/w2")))
;
gsub(" ", "", paste(getwd(), "/probabilityAndStatisticalInference/w2"))
gsub(" ", "", paste(getwd(), "/probabilityAndStatisticalInference/w2"))[1]
gsub(" ", "", paste(getwd(), "/probabilityAndStatisticalInference/w2"))
setwd(gsub(" ", "", paste(getwd(), "/probabilityAndStatisticalInference/w2")))
;
wd <- gsub(" ", "", paste(getwd(), "/probabilityAndStatisticalInference/w2"))
setwd(wd)
wd
setwd("/Users/bambrozi/workspace/github.com/bambrozio/academic-corner/dit/MScDataAnalytics/probabilityAndStatisticalInference/w2/probabilityAndStatisticalInference/w2")
setwd("/Users/bambrozi/workspace/github.com/bambrozio/academic-corner/dit/MScDataAnalytics/probabilityAndStatisticalInference/w2/probabilityAndStatisticalInference/w2")
getwd()
facebookData <- read.delim("facebookNarcissism.dat",  header = TRUE)
facebookData
graph <- ggplot(facebookData, aes(NPQC_R_Total, Rating))
graph + geom_point() + ggtitle("geompoint")
ggsave("Week2 Example with point.png", plot=last_plot())
graph + geom_point(shape = 17) + ggtitle("geom_point(shape = 17)")
ggsave("Week2 Example with triangle.png", plot=last_plot())
graph + geom_point(size = 6) + ggtitle ("geom_point(size = 3)")
ggsave("Week2 Example changing size.png", plot=last_plot())
graph + theme_bw(base_size=13)  + geom_point(shape = 17) + ggtitle ("theme_bw(base_size=13")
ggsave("Week2 using theme.png", plot=last_plot())
graph + theme_dark() + geom_point(shape = 17) + ggtitle ("theme_dark")
graph
theme_dark()
geom_point(shape = 17)
ggtitle ("theme_dark")
graph + theme_dark() + geom_point(shape = 17) + ggtitle ("theme_dark")
ggsave("Week2 using another theme.png", plot=last_plot())
graph + geom_point(aes(colour = Rating_Type)) + ggtitle("geom_point(aes(colour = Rating_Type))")
ggsave("Week2 Example changing colour.png", plot=last_plot())
graph + geom_point(aes(colour = Rating_Type), position = "jitter") + ggtitle ("geom_point(aes(colour = Rating_Type), position = jitter)")
ggsave("Week2 Example jitter.png", plot=last_plot())
festivalData <- read.delim("DownloadFestival.dat",  header = TRUE)
festivalData
festivalHistogram <- ggplot(festivalData, aes(day1)) + theme(legend.position="none")
festivalHistogram + geom_histogram(binwidth = 0.4) + labs(x = "Hygiene (Day 1 of Festival)", y = "Frequency")
ggsave("Week 2 Download Festival Histogram with Outlier.png")
festivalData2 = read.delim("DownloadFestival(No Outlier).dat",  header = TRUE)
festivalDensity <- ggplot(festivalData2, aes(day1))
festivalDensity + geom_density() + labs(x = "Hygiene (Day 1 of Festival)", y = "Density Estimate")
ggsave("Week2 Download Density.png")
festivalDensity + geom_density(aes(fill = gender), alpha = 0.5) + labs(x = "Hygiene (Day 1 of Festival)", y = "Density Estimate")
ggsave("Week 2 Download gender Density.png")
festivalDensity + geom_histogram(binwidth = 0.4) + labs(x = "Hygiene (Day 1 of Festival)", y = "Frequency") + theme(legend.position="none")
ggsave("Week 2 Download Festival Histogram without Outlier.png")
stem(facebookData$NPQC_R_Total)
stem(festivalData$day1)
festivalBoxplot <- ggplot(festivalData, aes(gender, day1))
festivalBoxplot <- ggplot(festivalData, aes(gender, day1))
festivalBoxplot + geom_boxplot() + labs(x = "Gender", y = "Hygiene (Day 1 of Festival)")
ggsave("Week 2 Download Festival Boxplot with Outlier.png")
festivalData2 = read.delim("DownloadFestival(No Outlier).dat",  header = TRUE)
festivalBoxplot2 <- ggplot(festivalData2, aes(gender, day1))
festivalBoxplot2 + geom_boxplot() + labs(x = "Gender", y = "Hygiene (Day 1 of Festival)")
ggsave("Week 2 Download Festival Boxplot.png")
festivalBoxplot <- ggplot(festivalData, aes(gender, day2))
festivalBoxplot + geom_boxplot() + labs(x = "Gender", y = "Hygiene (Day 2 of Festival)")
ggsave("Week 2 Download Festival Boxplot day 2.png")
festivalBoxplot <- ggplot(festivalData, aes(gender, day3))
festivalBoxplot + geom_boxplot() + labs(x = "Gender", y = "Hygiene (Day 3 of Festival)")
ggsave("Week 2 Download Festival Boxplot day 3.png")
outlierSummary<-function(variable, digits = 2){
zvariable<-(variable-mean(variable, na.rm = TRUE))/sd(variable, na.rm = TRUE)
outlier95<-abs(zvariable) >= 1.96
outlier99<-abs(zvariable) >= 2.58
outlier999<-abs(zvariable) >= 3.29
ncases<-length(na.omit(zvariable))
percent95<-round(100*length(subset(outlier95, outlier95 == TRUE))/ncases, digits)
percent99<-round(100*length(subset(outlier99, outlier99 == TRUE))/ncases, digits)
percent999<-round(100*length(subset(outlier999, outlier999 == TRUE))/ncases, digits)
cat("Absolute z-score greater than 1.96 = ", percent95, "%", "\n")
cat("Absolute z-score greater than 2.58 = ",  percent99, "%", "\n")
cat("Absolute z-score greater than 3.29 = ",  percent999, "%", "\n")
}
outlierSummary(festivalData$day1)
outlierSummary(festivalData$day2)
outlierSummary(festivalData$day3)
chickFlick = read.delim("ChickFlick.dat",  header = TRUE)
bar<-ggplot(chickFlick, aes(x=interest)) + geom_bar()
bar
bar <- ggplot(chickFlick, aes(film, interest))
bar + stat_summary(fun.y=mean, geom="bar")
bar <- ggplot(chickFlick, aes(film, interest, fill = gender ))
bar + stat_summary(fun.y = mean, geom = "bar", position="dodge") + labs(x="Film") + labs(y="Mean interest") + scale_fill_manual("Gender", values=c("Female" = "#008000", "Male" = "#0000FF"))
ggsave("Week 2 Chick Flick Clustered Error Bar Custom Colours.png")
setwd("~/workspace/github.com/bambrozio/academic-corner/dit/MScDataAnalytics/probabilityAndStatisticalInference/w2/probabilityAndStatisticalInference/w2")
getwd()
getwd()
setwd("~/workspace/github.com/bambrozio/academic-corner/dit/MScDataAnalytics/probabilityAndStatisticalInference/w2/probabilityAndStatisticalInference/w3")
getwd()
setwd("/Users/bambrozi/workspace/github.com/bambrozio/academic-corner/dit/MScDataAnalytics/probabilityAndStatisticalInference/w2/probabilityAndStatisticalInference/w3")
getwd()
setwd("~/workspace/github.com/bambrozio/academic-corner/dit/MScDataAnalytics/probabilityAndStatisticalInference/w2/probabilityAndStatisticalInference/w3")
getwd()
getwd()
setwd("/Users/bambrozi/workspace/github.com/bambrozio/academic-corner/dit/MScDataAnalytics/probabilityAndStatisticalInference/w3")
getwd()
survey <- read.table("survey.dat")
survey
colnames(survey) <- tolower(colnames(survey))
colnames
library(pastecs) #For creating descriptive statistic
library(ggplot2) #For creating histograms with more
library(psych) # Some useful descriptive functions
library(semTools) #For skewness and kurtosis
library(pastecs) #For creating descriptive statistic
install.packages("pastecs")
library(pastecs) #For creating descriptive statistic
library(ggplot2) #For creating histograms with more
library(psych) # Some useful descriptive functions
library(semTools) #For skewness and kurtosis
install.packages("semTools")
library(semTools) #For skewness and kurtosis
library(car) # For Levene's test for homogeneity of
pastecs::stat.desc(survey$tpcoiss, basic=F)
pastecs::stat.desc(survey$tpcoiss, basic=T)
pastecs::stat.desc(survey$tpcoiss, basic=F)
tpskew<-semTools::skew(survey$tpcoiss)
tpkurt<-semTools::kurtosis(survey$tpcoiss)
tpskew[1]/tpskew[2]
tpkurt[1]/tpkurt[2]
gg <- ggplot(survey, aes(x=survey$tpcoiss))
gg <- gg + labs(x="Feeling of Control")
gg <- gg + geom_histogram(binwidth=2, colour="black",
aes(y=..density.., fill=..count..))
gg <- gg + scale_fill_gradient("Count", low="#DCDCDC",
high="#7C7C7C")
gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpcoiss, na.rm=TRUE), sd=sd(survey$tpcoiss, na.rm=TRUE)))
gg
qqnorm(survey$tpcoiss)
qqline(survey$tpcoiss, col=2) #show a line on theplot
sort(scale(survey$tpcoiss))
pastecs::stat.desc(survey$tpstress, basic=F)
semTools::skew(survey$tpstress)
semTools::kurtosis(survey$tpstress)
gs <- ggplot(survey, aes(x=survey$tpstress))
gs <- gs + labs(x="Perceived Stress")
gs <- gs + geom_histogram(binwidth=2, colour="black",
aes(y=..density.., fill=..count..))
gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
gs <- gs + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpstress, na.rm=TRUE), sd=sd(survey$tpstress, na.rm=TRUE)))
gs
qqnorm(survey$tpstress)
qqline(survey$tpstress, col=2) #show a line on theplot
sort(scale(survey$tpstress))
scatter <- ggplot(survey, aes(survey$tpstress, survey$tpcoiss))
scatter + geom_point() + labs(x = "Total Perceived Stress", y = "Total PCOISS")
scatter <- ggplot(survey, aes(survey$tpstress, survey$tpcoiss))
scatter + geom_point() + labs(x = "Total Perceived Stress", y = "Total PCOISS")
scatter + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F) + labs(x = "Total Perceived Stress", y = "Total PCOISS")
stats::cor.test(survey$tpcoiss, survey$tpstress, method='pearson')
cor.test(survey$tpcoiss, survey$tpstress, method = "spearman")
cor.test(survey$tpcoiss, survey$tpstress, method = "kendall")
psych::describeBy(survey$tslfest,group=survey$sex)
car::leveneTest(tslfest ~ sex, data=survey)
stats::t.test(tslfest~sex,var.equal=TRUE,data=survey)
drinkset<- read.table("Field-BDI-Non-parametric.dat")
describeBy(drinkset$bdisun,group=drinkset$drink)
drinkset<- read.table("Field-BDI-Non-parametric.dat")
describeBy(drinkset$bdisun,group=drinkset$drink)
vodkadata <- subset(drinkset, drink=1)
beerdata <-subset(drinkset, drink=2)
gs <- ggplot(vodkadata, aes(x=vodkadata$bdisun))
gs <- gs + labs(x="Vodka")
gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
gs <- gs + stat_function(fun=dnorm, color="red",args=list(mean=mean(vodkadata$bdisun, na.rm=TRUE), sd=sd(vodkadata$bdisun, na.rm=TRUE)))
gs
gs <- ggplot(beerdata, aes(x=beerdata$bdisun))
gs <- gs + labs(x="Beer")
gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
gs <- gs + stat_function(fun=dnorm, color="red",args=list(mean=mean(beerdata$bdisun, na.rm=TRUE), sd=sd(beerdata$bdisun, na.rm=TRUE)))
gs
stats::wilcox.test(bdisun~drink, data=drinkset)
wilcox.test(bdiwed~drink, data=drinkset)
sort(scale(survey$tpcoiss))
pastecs::stat.desc(survey$tpcoiss, basic=F)
tpskew<-semTools::skew(survey$tpcoiss)
tpkurt<-semTools::kurtosis(survey$tpcoiss)
tpskew[1]/tpskew[2]
tpkurt[1]/tpkurt[2]
gg <- ggplot(survey, aes(x=survey$tpcoiss))
gg <- gg + labs(x="Feeling of Control")
gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpcoiss, na.rm=TRUE), sd=sd(survey$tpcoiss, na.rm=TRUE)))
#to display the graph request the contents of the variable be shown
gg
qqnorm(survey$tpcoiss)
qqline(survey$tpcoiss, col=2) #show a line on theplot
sort(scale(survey$tpcoiss))
