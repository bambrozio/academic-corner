source(file = "./ca-utils.R")
library("httr")
jcdecaux.api.token   <- NULL
task2.df.dublin.bike <- data.frame(NULL)
api.service.url      <- "https://api.jcdecaux.com/vls/v1/stations?"
Task2.loadDS <- function() {
Task2.sanity.checks()
response <- GET(api.service.url,
query = list(apiKey   = jcdecaux.api.token,
contract = "Dublin"))
results  <- content(response)
limit    <- length(results)
for (i in 1:limit) {
df <- data.frame(results[i])
task2.df.dublin.bike <<- rbind(task2.df.dublin.bike, df)
}
}
Task2.setJcdecauxAPIToken <- function(token) {
jcdecaux.api.token <<- token
}
Task2.sanity.checks <- function() {
if (is.null(jcdecaux.api.token)) {
stop(
"jcdecaux.api.token still NULL. Please, set it up by calling 'Task2.setJcdecauxAPIToken(token = )' first."
)
}
if (length(task2.df.dublin.bike) == 0) {
Task2.loadDS()
}
}
Task2.1.mngEnq1 <- function() {
# 1. Status summary from Dublin stations that has a payment terminal:
Task2.sanity.checks()
}
Task2.1.mngEnq2 <- function() {
# 2. Dublin Bike Stations with high rent flow right now. (5 or less bicycle available).
Task2.sanity.checks()
}
Task2.1.mngEnq3 <- function() {
# 3. Dublin Bike Stations with low rent flow right now. (5 or more bicycle available).
Task2.sanity.checks()
}
Task2.loadDS()
gc()
rm(list = ls())
.rs.restartR()
source(file = "./ca-utils.R")
library("httr")
jcdecaux.api.token   <- NULL
task2.df.dublin.bike <- data.frame(NULL)
api.service.url      <- "https://api.jcdecaux.com/vls/v1/stations?"
Task2.loadDS <- function() {
Task2.sanity.checks()
response <- GET(api.service.url,
query = list(apiKey   = jcdecaux.api.token,
contract = "Dublin"))
results  <- content(response)
limit    <- length(results)
for (i in 1:limit) {
df <- data.frame(results[i])
task2.df.dublin.bike <<- rbind(task2.df.dublin.bike, df)
}
}
Task2.setJcdecauxAPIToken <- function(token) {
jcdecaux.api.token <<- token
}
Task2.sanity.checks <- function() {
if (is.null(jcdecaux.api.token)) {
stop(
"jcdecaux.api.token still NULL. Please, set it up by calling 'Task2.setJcdecauxAPIToken(token = )' first."
)
}
if (length(task2.df.dublin.bike) == 0) {
Task2.loadDS()
}
}
Task2.1.mngEnq1 <- function() {
# 1. Status summary from Dublin stations that has a payment terminal:
Task2.sanity.checks()
}
Task2.1.mngEnq2 <- function() {
# 2. Dublin Bike Stations with high rent flow right now. (5 or less bicycle available).
Task2.sanity.checks()
}
Task2.1.mngEnq3 <- function() {
# 3. Dublin Bike Stations with low rent flow right now. (5 or more bicycle available).
Task2.sanity.checks()
}
Task2.loadDS()
Task2.setJcdecauxAPIToken("112f427f9b99fe541b559339ca71f297c39fed3a")
Task2.loadDS()
Cstack_info()["size"]
Cstack_info()["size"]
Cstack_info()["size"]
library("RJDBC")
Sys.setenv(JAVA_HOME = "/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk")
library("RJDBC")
install.packages("rJava")
install.packages("RJDBC")
library("RJDBC")
library("rJava")
install.packages("RJDBC")
